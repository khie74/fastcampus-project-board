# logback의 debug 로그 활성화 여부
# logback.xml 대신 여기서 이렇게 설정 가능
debug: false

# actuator endpoint 중에 감춰진 것들을 모두 활성화할지 여부
# 개발단계에서 보고 싶은 데이터를 볼 수 있으므로 추가하였음.
#
management:
  endpoints:
    web:
      exposure:
        include: "*"

# 로깅 레벨
logging:
  level:
    # 루트 패키지 이하는 디버그 레벨로 보겠다.
    com.fastcampus.projectboard: debug
    # 스프링프레임워크 web.servlet 로그를 debug 레벨로 보겠다.
    # 위에서 debug 레벨을 false로 하고, 보고 싶은 패키지만을 true로 하면 편하다.
    org.springframework.web.servlet: debug
    # JPA 기술을 사용할 떄, 쿼리 로그를 debug로 관찰할 수 있는데, 이 때
    # 안에 들어가는 바인딩 파라미터는 모두 물음표로 표시되게 된다.
    # 이걸 관찰할 수 있게 해주는 것이 이 로깅 레벨이다.
    org.hibernate.type.descriptor.sql.BasicBinder: trace

#
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: sks
    password: rjatn03$
    driver-class-name: com.mysql.cj.jdbc.Driver

#    # 서버 기동해서 h2 console로 접속해 보기 위해서 데이터소스를 잠깐 MySQL에서 h2로 변경해서 테스트해 보았다.
#    url: jdbc:h2:mem:testdb
#    username: sa
#    driver-class-name: org.h2.Driver

  jpa:
    # Spring Boot 2.4에서 새로 생김.
    # 테스트용 데이터베이스 데이터를 생성할 수 있게끔 한다.
    # 리소스안에 쿼리 파일을 만들어 놓고, 이를 활용하게 된다.
    # 이름은 미리 정의된 약속이 있다.(data.sql)
    # 맨 처음 초기값으로 들어갔으면 하는 데이터를 모두 넣을 수 있다.
    defer-datasource-initialization:

    # 매우 중요!!!
    # entity를 보고 데이블 데이터를 유추해서 자동으로 DDL문을 만들어준다.
    # 이 프로젝트에서는 Article, ArticleComent 엔티티만 보고도 테이블을 자동으로 만들어준다.
    # 그래서 DDl을 직접 짤 필요가 없게 만들어준다.
    hibernate:
      ddl-auto: create
    # sql문을 디버그 로그에 출력할지 여부
    show-sql: true
    # 추가적인 프로퍼티
    # JPA에 사용할 구현체에 종속된 프로퍼티를 따로 설정할 수 있다.
    # 현재 Spring Boot는 JPA 구현체로 Hibernate를 사용하고 있다.
    # hibernate properties를 구글에서 검색해 보면 관련 자료를 찾을 수 있다.
    properties:
      hibernate:
        # SQL문을 예쁘게 포메팅해서 표시해라.
        format_sql: true
        # JPA에서 연관관계가 매핑된 쿼리를 실행시 한번에 벌크로 셀렉해 올 수 있게하는 row수
        # 조인 해서 가져와야 할 로우수가 10개라면, 쿼리가 10개까지 만들어질 수 있는데..
        # 이를 해결할 수 있는 방법으로 사용한다.
        # 이 걸 이용하면, 10개의 쿼리를 id in 쿼리로 바꿔져서 한번의 select문으로 가져올 수 있도록 해준다.
        #
        # 다른 사이트의 설명
        # IN절로 한번에 모아서 보내는 기능
        # 조회 성능 개선을 위해 꼭 활용할 것.
        # 지연 쿼리를 사용하는 경우, 엔티니 객체에는 프록시 객체로 저장해 두고,
        # 실제로 사용할 때 DB에서 가져오게 되는데,
        # 이 설정을 하면, 지정한 개수만큼 IN 절로 묶어서 쿼리를 보내게 된다.
        #
        default_batch_fetch_size: 100
  h2:
    console:
      # H2의 웹 콘솔 활성화 여부
      # 기본값이 false이므로 지우면 된다.
      # 근데 나중에 확인차 삭제하지는 않았다.
      enabled: false
  sql:
    init:
      # 리소스에 만든 data.sql을 어제 작동시킬지에 대한 규칙 설정
      # never, always, embeded(임베디드 DB로 사용될 때만 작동, 즉 테스트에서만 작동)
      mode: always


  # Spring Data REST 모듈을 추가하면서 추가
  data:
    rest:
      base-path: /api
      # 어노테이션으로 노출한 repository만 REST API로 노출하겠다는 의미
      detection-strategy: annotated

  # 내가 만든 프로퍼티
  # 사용자가 만든 속성이므로, gradle clean build를 하면 경고가 발생할 수 있다.
  #
  # spring-boot-configuration-processor를 의존성에 추가하면
  # 사용자 커스텀 프로퍼티에도 문서 세팅이 가능해지고, IDE 지원을 받을 수 있다.
  # (thymeleaf3 프로퍼티를 만들면서 추가함)
  thymeleaf3:
    decoupled-logic: true

# yaml 파일은 '-' 3개로 서로 다른 문서를 작성할 수 있다.


---
# 테스트 데이터베이스용 문서

#spring:
#  config:
#    activate:
#      # testdb 프로파일이 활성화 되어 있을 때 이 문서를 읽어라.
#      on-profile: testdb
#  datasource:
#    # 주의! MySQL 호환성 모드를 사용한다!!!
#    url: jdbc:h2:mem:board;mode=mysql
#    driver-class-name: org.h2.Driver
#  sql:
#    init:
#      mode: always
#  # 테스트 DB 자동 replaction 기능을 사용하지 말아라.
#  # 내가 설정한 파일을 사용하기 위해서 아래를 추가한다.
#  test.database.replace: none



