plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // queryDSL 설정
    // jpa, core가 중요. apt도 중요.
    // collections은 없어도 무리가 없지만 모두 추가
    // 위의 spring dependency management 플러그인은 queryDSL도 관리하는 대상에 포함하고 있다.
    // 그래서 일일이 버전을 지정하지 않아도 된다.
    //
    // 주의! 아래 코드 처럼 하니, 실행시 클래스가 없다고 에러가 발생했다.(NoClassDefFoundError: javax/persistence/NoResultException)
    //implementation 'com.querydsl:querydsl-jpa'
    // 그래서 참고 사이트(아래 참조)를 보고, 뒤에 'jakarta'를 붙여주었다. 일단 이렇게 문제 해결...
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    // 그러나 이건 특이한다.
    // spring dependency management의 경우, 마지막 부분이 버전인 경우에만 자동으로 처리된다.
    // 아래와 같은 경우에는 마지막이 버전이 아니다. 그래서 자동으로 처리되지 않느다.
    // 이런 문법의 경우에는 버전을 생략할 수가 없다. 수동으로 넣어주어야 한다.
    // 아래 코드는 imported property안에서 QueryDSL property를 불러다가 넣어준 것이다.
    // 주의! 강의에서는 맨 뒤에 'jpa'이었으나, 이렇게 하면 아래 에러가 발생하였다.
    // "Unable to load class 'javax.persistence.Entity'"
    // 참고 사이트
    //  https://velog.io/@juhyeon1114/Spring-QueryDsl-gradle-%EC%84%A4%EC%A0%95-Spring-boot-3.0-%EC%9D%B4%EC%83%81
    // 이 사이트의 설정을 보고서 'jpa' -> 'jakarta'로 변경하니 문제가 해결되었다.
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    // 이걸 넣지 않고 queryDSL을 사용하면 다음 에러가 발생한다.
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Thymeleaf - 서버사이드 자바 템플릿 엔진
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // 커스텀 configuration key(ex. application.yaml)로 작업할 때
    // 상황별(context) 도움말 및 "code completion"을 제공할 수 있도록 메타 데이터를 생성한다.
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

// 버전을 제대로 읽어오는지 확인하기...
print("querydsl 버전 확인: " + dependencyManagement.importedProperties['querydsl.version'])

tasks.named('test') {
    useJUnitPlatform()
}


// QueryDSL 전용 설정부
// 이 설정을 해주는 이유
// Intellij를 사용할 때 빌드하다가 발생할 수 있는 불편함을 해소하기 위해 필요하다.
// (아래 코드가 없어도 queryDSL의 기본동작은 된다)

// 문자열 타입의 변수를 만듦
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
// querydsl은 자동으로 클래스 파일을 생성하는 기능을 가지고 있는데, 그것을 우리는 QClass라고 부른다.
// 원래는 build 디렉토리에 생성되는데, 생성 경로를 변경하기 위해서 이 설정을 하고 있다.
// IDE를 사용해서 빌드할 때 생길 수 있는 잠재적인 문제를 피하기 위해서 이렇게 설정하고 있다.
// gradle 빌드도구가 스캔하는 영역과 IDE가 스캔하는 영역이 서로 차이가 있다.
// intellij가 빌드를 시도할 떄, intellij가 스캔하고자 하는 빌드 클래스 파일들이 있는 영역들을
// 한번 더 스캔하면서 중복 스캔이 발생한다.
// (강의 Part2 06 API 구현의 내용)
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    // 강의에서는 이렇게 하였는데, 이걸로는 QClass를 제대로 임포트해오지 못한다.
    //main.java.srcDirs += [ generated ]
    // 그래서 이렇게 수정하였더니 잘 되었다.
    // 참고 사이트
    //  https://velog.io/@juhyeon1114/Spring-QueryDsl-gradle-%EC%84%A4%EC%A0%95-Spring-boot-3.0-%EC%9D%B4%EC%83%81
    main.java.srcDir generated
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
